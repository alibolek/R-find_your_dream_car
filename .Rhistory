link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
osman <- data.frame(link.data)
View(osman)
url2 <- paste("https://www.tatilbudur.com/yurtici-otelleri?&page=15", sep="")
print(url2)
webpage2 <- read_html(url2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
osman <- data.frame(link.data)
View(osman)
url2 <- paste("https://www.tatilbudur.com/yurtici-otelleri?&page=2", sep="")
print(url2)
webpage2 <- read_html(url2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
osman <- data.frame(link.data)
View(osman)
url2 <- paste("https://www.tatilbudur.com/yurtici-otelleri?&page=5", sep="")
print(url2)
webpage2 <- read_html(url2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
osman <- data.frame(link.data)
View(osman)
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
osman <- data.frame(price.data)
View(osman)
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
osman <- data.frame(price.data)
View(osman)
url2 <- paste("https://www.tatilbudur.com/yurtici-otelleri?&page=5", sep="")
print(url2)
webpage2 <- read_html(url2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
osman <- data.frame(price.data)
View(osman)
View(osman)
url2 <- paste("https://www.tatilbudur.com/yurtici-otelleri?&page=5", sep="")
print(url2)
webpage2 <- read_html(url2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
city <- html_nodes(webpage2,'.location')
city.data <- html_text(city)
head(city.data)
city.data<-gsub("\n","",city.data)
city.data<-gsub("\t","",city.data)
city.data<-gsub("Haritada Göster","",city.data)
city.data<-gsub(" / ",",",city.data)
city.data <- city.data[2:21]
city.coords <- data.frame()
for (i in (1:length(city.data))){
city.geo <- (geocode(city.data[i]))
print(city.data[i])
city.coords <- rbind(city.coords,city.geo)
}
all <- data.frame(link.data,city.data)
all2 <- cbind(all,city.coords)
View(all2)
View(all2)
hotelmap <- get_map(location = geocode("Turkey"),
zoom = 5, maptype = 'roadmap', source = "google")
hotelmap <- ggmap(hotelmap)
jobmap +  geom_point(aes(x = lon, y = lat), all2)
hotelmap +  geom_point(aes(x = lon, y = lat), all2)
link.data <- html_attr(html_nodes(webpage2, "a.img-link"), "href")[2:21]
hotel.name <- html_nodes(webpage2,'.item-title')
hotel.name.data <- html_text(hotel.name)
head(hotel.name.data)
hotel.name <- html_nodes(webpage2,'.item-title')
hotel.name.data <- html_text(hotel.name)[2:21]
hotel.name.data<-gsub("\n","",hotel.name.data)
hotel.name.data<-gsub("\t","",hotel.name.data)
head(hotel.name.data)
all <- data.frame(link.data,city.data,hotel.name.data)
all2 <- cbind(all,city.coords)
hotelmap <- get_map(location = geocode("Turkey"),
zoom = 5, maptype = 'roadmap', source = "google")
hotelmap <- ggmap(hotelmap)
hotelmap +  geom_point(aes(x = lon, y = lat), all2)
hotelmap +  geom_point(aes(x = lon, y = lat,colour = hotel.name.data), all2)
total.found <- html_nodes(webpage2,'strong')
total.found.data <- html_text(total.found)
head(total.found.data)
total.found.data <- html_text(total.found)[1]
head(total.found.data)
price <- html_nodes(webpage2,'.new-price')
price.data <- html_text(price)
webpage3 <- read_html(link.data[1])
price <- html_nodes(webpage3,'.price')
price.data <- html_text(hotel.name)
pricex <- data.frame(price.data)
View(pricex)
price.data <- html_text(price)
pricex <- data.frame(price.data)
View(pricex)
print (webpage3)
print (price )
x <- "fa\xE7ile"
Encoding(x)
Encoding(x) <- "latin1"
library(XML)
install.packages("XML")
URL<- paste("http://www.tornadohistoryproject.com/tornado/all/table",sep="")
URL<- paste("http://www.tornadohistoryproject.com/tornado/all/table",sep="")
tables <<- readHTMLTable(URL)
URL<- paste("http://www.tornadohistoryproject.com/tornado/all/table",sep="")
tables <- readHTMLTable(URL)
library(XML)
library(httr)
tables <- GET("http://www.tornadohistoryproject.com/tornado/all/table")
poptable <- readHTMLTable(rawToChar(tables$content),which = 2))
poptable <- readHTMLTable(rawToChar(tables$content),which = 2)
View(poptable)
poptable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(poptable)
tables <- GET("http://www.tornadohistoryproject.com/tornado/all/table?p=1&l=5000")
poptable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(poptable)
tables <- GET("http://www.tornadohistoryproject.com/tornado/all/table?p=2&l=5000")
tornadotable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(tornadotable)
View(tornadotable)
View(tornadotable)
install.packages("shiny")
runGitHub("shiny_example", "rstudio")
install.packages("runGitHub")
install.packages("git2r")
runGitHub("shiny_example", "rstudio")
library(git2r)
runGitHub("shiny_example", "rstudio")
library(shinyFiles)
install.packages("shinyFiles")
runGitHub("shiny_example", "rstudio")
runUrl("https://github.com/rstudio/shiny_example/archive/master.tar.gz")
if (!require(devtools))
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
install.packages("DT")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
runGitHub("shiny_example", "rstudio")
library(xml2)
library(rvest)
library(ggmap)
library(grid)
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=2", sep="")
print(url)
webpage2 <- read_html(url)
total.found <- html_nodes(webpage2,'.list-title')
osman <- data.frame(total.found)
head(total.found)
total.found <- html_nodes(webpage2,'.list-title')
asd <- html_text(total.found)
head(asd)
asdx <- data.frame(asd)
View(asdx)
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=1", sep="")
print(url)
webpage2 <- read_html(url)
total.found <- html_nodes(webpage2,'.list-title')
asd <- html_text(total.found)
asdx <- data.frame(asd)
View(asdx)
if (!require(devtools))
install.packages("devtools")
devtools::install_github("rstudio/leaflet")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
shiny::runGitHub("rstudio/shiny-examples", subdir="063-superzip-example")
info <- html_nodes(webpage2,'.p4')
info.data <- html_text(info)
asdx2 <- data.frame(info.data)
View(asdx2)
library(XML)
library(httr)
tables <- GET("https://www.arabam.com/ikinci-el/otomobil?page=1")
tornadotable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(tornadotable)
View(tornadotable)
library(XML)
library(httr)
tables <- GET("https://www.arabam.com/ikinci-el/otomobil?page=2")
tornadotable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(tornadotable)
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=1", sep="")
tables <- GET(url)
tornadotable <- readHTMLTable(rawToChar(tables$content),which = 1)
View(tornadotable)
tornadotable[,1] <- NULL
View(tornadotable)
for (i in tornadotable){
if (tornadotable[1,i] == NA){
tornadotable[1,i] == NULL
}
}
for (i in tornadotable){
if (tornadotable[1,i] == NA){
tornadotable[-c(i), ]
}
}
print(tornadotable[1,1])
print(tornadotable[1,5])
na.omit(tornadotable)
View(tornadotable)
tornadotable<-na.omit(tornadotable)
View(tornadotable)
length(tornadotable)
row_number(tornadotable)
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
View(cars.all)
View(cars.all)
colnames(cars.all)
names(cars.all)[1:7]<-c(paste("premium","premium","premium","premium","premium","premium","premium"))
View(cars.all)
names(cars.all)[1:7]<-c("premium","premium","premium","premium","premium","premium","premium")
View(cars.all)
names(cars.all)[1:7]<-c("İlan Başlığı","Yıl","Kilometre","Renk","Fiyat","Tarih","İl / İlçe")
View(cars.all)
runApp()
View(tornadotable)
View(tornadotable)
cars.all[7,1]
cars.all[,c(1)]
cars.all[,c(7)]
cars.all[,c(7)]<-gsub("([A-Z])", " \\1", cars.all[,c(7)])
View(cars.all)
View(cars.all)
cars.all[,c(5)]<-gsub(".", " ", cars.all[,c(5)])
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
cars.all[,c(7)]<-gsub("([A-Z])", " \\1", cars.all[,c(7)])
cars.all[,3]<-gsub(".", " ", cars.all[,3])
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
nrow(cars.all)
cars.all[,c(7)]<-gsub("([A-Z])", " \\1", cars.all[,c(7)])
cars.all[,3]<-gsub(".", "", cars.all[,3])
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
nrow(cars.all)
cars.all[,c(7)]<-gsub("([A-Z])", " \\1", cars.all[,c(7)])
cars.all[,3]<-gsub("\\.", "", cars.all[,3])
cars.all[,5]<-gsub("\\.", "", cars.all[,5])
cars.all[,5]<-gsub(" TL", "", cars.all[,5])
cars.all <- as.numeric(cars.all)
cars.all[,5] <- as.numeric(cars.all[,5])
cars.all[,3] <- as.numeric(cars.all[,3])
View(cars.all)
names(cars.all)[1:7]<-c("İlan Başlığı","Yıl","Kilometre","Renk","Fiyat","Tarih","İl / İlçe")
attach(InsectSprays)
data(InsectSprays)
str(InsectSprays)
result <- aov(count ~ spray, data=InsectSprays)
result
summary(result)
TukeyHSD(result)
boxplot(count ~ spray, data= InsectSprays)
boxplot(count ~ spray, data= InsectSprays)
boxplot(count ~ spray, data= InsectSprays)
lm(result)
lm(count ~ spray,result)
lm(count ~ spray,data=result)
lm(count ~ spray,data=InsectSprays)
faithful
cor(faithful$eruptions, faithful$waiting)
lm(eruptions~waiting, data= faithful)
results <- lm(eruptions~waiting, data= faithful)
summary(results)
x<- data.frame(waiting=80)
predict(results,x,interval="confidence")
x<- data.frame(waiting=180)
predict(results,x,interval="confidence")
stackloss
model <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc., data= stackloss)
mode
model
model <- lm(stack.loss~Air.Flow+Water.Temp+Acid.Conc., data= stackloss)
model
summary(model)
model <- lm(stack.loss~Air.Flow+Water.Temp, data= stackloss)
summary(model)
shiny::runApp('rproject')
runApp('rproject')
library(datasets)
mtcars
cars.all
library(xml2)
library(rvest)
library(ggmap)
library(grid)
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
library(XML)
library(httr)
cars.all <- data.frame()
for (i in 1:50) {
url <- paste("https://www.arabam.com/ikinci-el/otomobil?page=",i, sep="")
tables <- GET(url)
cars <- readHTMLTable(rawToChar(tables$content),which = 1)
cars[,1] <- NULL
cars<-na.omit(cars)
cars.all <- rbind(cars.all,cars)
}
names(cars.all)[1:7]<-c("İlan Başlığı","Yıl","Kilometre","Renk","Fiyat","Tarih","İl / İlçe")
cars.all[,c(7)]<-gsub("([A-Z])", " \\1", cars.all[,c(7)])
cars.all[,3]<-gsub("\\.", "", cars.all[,3])
cars.all[,3] <- as.numeric(cars.all[,3])
cars.all[,5]<-gsub("\\.", "", cars.all[,5])
cars.all[,5]<-gsub(" TL", "", cars.all[,5])
cars.all[,5] <- as.numeric(cars.all[,5])
View(cars.all)
cars.all
runApp('rproject')
summary(cars.all)
runApp('rproject')
runApp('rproject')
runApp('rproject')
summary(cars.all)
summary(mtcars)
data("mtcars")
data(mtcars)
asd<-data.frame(mtcars)
View(asd)
runApp('rproject')
install.packages("leaflet")
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
points()
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
shinyApp(ui, server)
shinyApp(ui, server)
leaflet() %>%
addGeoJSON(geodata) %>%
addCircles(-60, 60, radius = 5e5, layerId = "circle") %>%
fitBounds(-87.1875, 71.4131, 128.3203, 0.3515)
output$map1 <- renderLeaflet({
leaflet() %>%
addGeoJSON(geodata) %>%
addCircles(-60, 60, radius = 5e5, layerId = "circle") %>%
fitBounds(-87.1875, 71.4131, 128.3203, 0.3515)
})
shinyApp(
ui = fluidPage(
sliderInput(inputId = "time",
label = "Years Before Present:",
min = -50, max = 15000, value = 0, step = 500),
tags$div(title = "This input has a tool tip",
selectInput(inputId = "taxon",
label = "Taxon of Interest",
choices = sort(unique(pollen_subset$Taxon)))),
leafletOutput("MapPlot1")
),
server = function(input, output) {
output$MapPlot1 <- renderLeaflet({
leaflet() %>%
addProviderTiles("Stamen.Watercolor") %>%
setView(lng = -100, lat = 50, zoom = 2)
})
observe({
age <- input$time
taxon <- input$taxon
sites <- pollen_subset %>%
filter(findInterval(pollen_subset$Age, c(age - 250, age + 250)) == 1 &
pollen_subset$Taxon %in% taxon)
leafletProxy("MapPlot1") %>% clearMarkers() %>%
addCircleMarkers(lng = sites$Longitude,
lat = sites$Latitude,
opacity = sites$Pct)
})
},
options = list(height = 600)
)
setwd("/home/eray/Desktop/webMining")
cars.all <- read.csv("cars.csv")
names(cars.all)[1:9]<-c("No","İlan Başlığı","Yıl","Kilometre","Renk","Fiyat","Tarih","İl / İlçe","links")
cars.all[,5] <- as.numeric(cars.all[,5])
cars.all[,2] <- as.character(cars.all[,2])
cars.all[,9] <- as.character(cars.all[,9])
cars.all[,10] <- as.character(cars.all[,10])
library(shiny); runApp('webproject.R')
runApp('webproject.R')
